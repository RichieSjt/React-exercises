{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","params","Fragment","path","exact","to","url"],"mappings":"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","file":"static/js/3.bb7b263f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__o5Fe3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3DPva\",\"loading\":\"NewCommentForm_loading__1e_xd\",\"control\":\"NewCommentForm_control__2FT8F\",\"actions\":\"NewCommentForm_actions__1XS5g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__6ZFqQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2vUSk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__377KN\"};","import { useRef, useEffect } from 'react'\n\nimport useHttp from '../../hooks/use-http'\nimport { addComment } from '../../lib/api'\nimport LoadingSpinner from '../UI/LoadingSpinner'\nimport classes from './NewCommentForm.module.css'\n\nconst NewCommentForm = (props) => {\n    const commentTextRef = useRef()\n\n    const { sendRequest, status, error } = useHttp(addComment)\n\n    const { onAddedComment } = props\n\n    useEffect(() => {\n        if(status === 'completed' && !error) {\n            onAddedComment()\n        }\n    }, [status, error, onAddedComment])\n\n    const submitFormHandler = (event) => {\n        event.preventDefault()\n\n        const enteredText = commentTextRef.current.value\n\n        // send comment to server\n        sendRequest({\n            commentData: { text: enteredText },\n            quoteId: props.quoteId\n        })\n    }\n\n    return (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n            {status === 'pending' && (\n                <div className=\"centered\">\n                    <LoadingSpinner />\n                </div>\n            )}\n            <div className={classes.control} onSubmit={submitFormHandler}>\n                <label htmlFor='comment'>Your Comment</label>\n                <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n            </div>\n            <div className={classes.actions}>\n                <button className='btn'>Add Comment</button>\n            </div>\n        </form>\n    )\n}\n\nexport default NewCommentForm\n","import classes from './CommentItem.module.css'\n\nconst CommentItem = (props) => {\n    return (\n        <li className={classes.item}>\n            <p>{props.text}</p>\n        </li>\n    )\n}\n\nexport default CommentItem","import CommentItem from './CommentItem'\nimport classes from './CommentsList.module.css'\n\nconst CommentsList = (props) => {\n    return (\n        <ul className={classes.comments}>\n            {props.comments.map((comment) => (\n                <CommentItem key={comment.id} text={comment.text} />\n            ))}\n        </ul>\n    )\n}\n\nexport default CommentsList\n","import { useState, useEffect, useCallback } from 'react'\nimport { useParams } from 'react-router-dom'\n\nimport classes from './Comments.module.css'\nimport NewCommentForm from './NewCommentForm'\nimport useHttp from '../../hooks/use-http'\nimport { getAllComments } from '../../lib/api'\nimport LoadingSpinner from '../UI/LoadingSpinner'\nimport CommentsList from '../comments/CommentsList'\n\nconst Comments = () => {\n    const [isAddingComment, setIsAddingComment] = useState(false)\n    const params = useParams()\n    const { quoteId } = params\n\n    const { sendRequest, status, data: loadedComments } = useHttp(getAllComments)\n\n    useEffect(() => {\n        sendRequest(quoteId)\n    }, [sendRequest, quoteId])\n\n    const addedCommentHandler = useCallback(() => {\n        sendRequest(quoteId)\n    }, [sendRequest, quoteId])\n\n    const startAddCommentHandler = () => {\n        setIsAddingComment(true)\n    }\n\n    let comments\n    \n    if(status === 'pending') {\n        comments = (\n            <div className=\"centered\">\n                <LoadingSpinner />\n            </div>\n        )\n    }\n\n    if(status === 'completed' && loadedComments && loadedComments.length > 0) {\n        comments = <CommentsList comments={loadedComments} />\n    }\n\n    if(status === 'completed' && (!loadedComments || loadedComments.length === 0)){\n        comments = <p className=\"centered\">No comments were added yet</p>\n    }\n\n    return (\n        <section className={classes.comments}>\n            <h2>User Comments</h2>\n            {!isAddingComment && (\n                <button className='btn' onClick={startAddCommentHandler}>\n                    Add a Comment\n                </button>\n            )}\n            {isAddingComment && (\n                <NewCommentForm\n                    onAddedComment={addedCommentHandler}\n                    quoteId={quoteId}\n                />\n            )}\n            {comments}\n        </section>\n    )\n}\n\nexport default Comments\n","import classes from './HighlightedQuote.module.css'\n\nconst HighlightedQuote = (props) => {\n    return (\n        <figure className={classes.quote}>\n            <p>{props.text}</p>\n            <figcaption>{props.author}</figcaption>\n        </figure>\n    )\n}\n\nexport default HighlightedQuote\n","import React, { useEffect } from 'react'\r\nimport { Route, Link, useRouteMatch } from 'react-router-dom'\r\nimport useHttp from '../hooks/use-http'\r\nimport { getSingleQuote } from '../lib/api'\r\n\r\nimport Comments from '../components/comments/Comments'\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote'\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner'\r\n\r\nconst QuoteDetail = () => {\r\n    // Match is like location but includes more information\r\n    const match = useRouteMatch()\r\n\r\n    // Match object\r\n    // isExact: false\r\n    // params: {\r\n    //     quoteId: 'q2'\r\n    // }\r\n    // path: '/quotes/:quoteId'\r\n    // url: '/quotes/q2'\r\n\r\n    const { sendRequest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true)\r\n\r\n    useEffect(() => {\r\n        sendRequest(match.params.quoteId)\r\n    }, [sendRequest, match.params.quoteId])\r\n\r\n    if(status === 'pending') {\r\n        return (\r\n            <div className=\"centered\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if(error) {\r\n        return <p className='centered'>{error}</p>\r\n    }\r\n\r\n    if(!loadedQuote.text) {\r\n        return <p>No quote found!</p>\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n\r\n            {/* <Route path={`/quotes/${params.quoteId}`} exact> */}\r\n            <Route path={match.path} exact>\r\n                <div className='centered'>\r\n                    <Link className='btn--flat' to={`${match.url}/comments`}>\r\n                        Load Comments\r\n                    </Link>\r\n                </div>\r\n            </Route>\r\n\r\n            {/* <Route path={`/quotes/${params.quoteId}/comments`}> */}\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default QuoteDetail\r\n"],"sourceRoot":""}