{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEnteringData","setIsEnteringData","authorInputRef","useRef","textInputRef","when","message","location","pathname","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","onFocus","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBC0E/BC,EAtEG,SAACL,GACf,MAA4CM,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACMC,EAAiBC,mBACjBC,EAAeD,mBAqBrB,OACI,eAAC,WAAD,WACI,cAAC,IAAD,CACIE,KAAML,EACNM,QAAS,SAACC,GAAD,+CAC6BA,EAASC,SADtC,4CAIb,cAAC,EAAD,UACI,uBACId,UAAWC,IAAQc,KACnBC,SA9BU,SAACC,GACvBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAIzCtB,EAAMwB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAuBpCI,QApBW,WACvBnB,GAAkB,IAgBV,UAKKR,EAAM4B,WACH,qBAAK3B,UAAWC,IAAQ2B,QAAxB,SACI,cAACC,EAAA,EAAD,MAIR,sBAAK7B,UAAWC,IAAQ6B,QAAxB,UACI,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK1B,OAExC,sBAAKR,UAAWC,IAAQ6B,QAAxB,UACI,uBAAOC,QAAQ,OAAf,kBACA,0BACIE,GAAG,OACHE,KAAK,IACLD,IAAKxB,OAGb,qBAAKV,UAAWC,IAAQmC,QAAxB,SACI,wBACIC,QAtCY,WAChC9B,GAAkB,IAsCEP,UAAU,MAFd,kC,gBCrCTsC,UApBE,WACb,MAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAEhBC,qBAAU,WACQ,cAAXH,GAECC,EAAQG,KAAK,aAElB,CAACJ,EAAQC,IAMZ,OACI,cAAC,EAAD,CAAWhB,UAAsB,YAAXe,EAAsBnB,WALxB,SAACwB,GACrBN,EAAYM","file":"static/js/4.824bc78e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2uLWc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__2uoWY\",\"loading\":\"QuoteForm_loading__2t9pC\",\"control\":\"QuoteForm_control__2zRQq\",\"actions\":\"QuoteForm_actions__URTv9\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from 'react'\nimport { Prompt } from 'react-router-dom'\n\nimport Card from '../UI/Card'\nimport LoadingSpinner from '../UI/LoadingSpinner'\nimport classes from './QuoteForm.module.css'\n\nconst QuoteForm = (props) => {\n    const [isEnteringData, setIsEnteringData] = useState(false)\n    const authorInputRef = useRef()\n    const textInputRef = useRef()\n\n    const submitFormHandler = (event) => {\n        event.preventDefault()\n\n        const enteredAuthor = authorInputRef.current.value\n        const enteredText = textInputRef.current.value\n\n        // optional: Could validate here\n\n        props.onAddQuote({ author: enteredAuthor, text: enteredText })\n    }\n\n    const formFocusedHandler = () => {\n        setIsEnteringData(true)\n    }\n\n    const finishedEnteringDataHandler = () => {\n        setIsEnteringData(false)\n    }\n\n    return (\n        <Fragment>\n            <Prompt\n                when={isEnteringData}\n                message={(location) =>\n                    `Are you sure you want to go to ${location.pathname}? All your entered data will be lost!`\n                }\n            />\n            <Card>\n                <form\n                    className={classes.form}\n                    onSubmit={submitFormHandler}\n                    onFocus={formFocusedHandler}\n                >\n                    {props.isLoading && (\n                        <div className={classes.loading}>\n                            <LoadingSpinner />\n                        </div>\n                    )}\n\n                    <div className={classes.control}>\n                        <label htmlFor='author'>Author</label>\n                        <input type='text' id='author' ref={authorInputRef} />\n                    </div>\n                    <div className={classes.control}>\n                        <label htmlFor='text'>Text</label>\n                        <textarea\n                            id='text'\n                            rows='5'\n                            ref={textInputRef}\n                        ></textarea>\n                    </div>\n                    <div className={classes.actions}>\n                        <button\n                            onClick={finishedEnteringDataHandler}\n                            className='btn'\n                        >\n                            Add Quote\n                        </button>\n                    </div>\n                </form>\n            </Card>\n        </Fragment>\n    )\n}\n\nexport default QuoteForm\n","import React, { useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport QuoteForm from '../components/quotes/QuoteForm'\r\nimport useHttp from '../hooks/use-http'\r\nimport { addQuote } from '../lib/api'\r\n\r\nconst NewQuote = () => {\r\n    const { sendRequest, status } = useHttp(addQuote)\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        if(status === 'completed') {\r\n            // Push allows users to go back, replace doesn't\r\n            history.push('/quotes')\r\n        }\r\n    }, [status, history])\r\n\r\n    const addQuoteHandler = (quoteData) => {\r\n        sendRequest(quoteData)\r\n    }\r\n\r\n    return (\r\n        <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\r\n    )\r\n}\r\n\r\nexport default NewQuote"],"sourceRoot":""}